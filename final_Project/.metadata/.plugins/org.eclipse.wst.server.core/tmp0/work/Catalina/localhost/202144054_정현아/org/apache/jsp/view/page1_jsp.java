/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2022-12-08 05:09:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class page1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("  		\r\n");
      out.write("<body class=\"d-flex h-100 text-center text-bg-dark\">\r\n");
      out.write("	<div class=\"cover-container d-flex w-100 h-100 p-3 mx-auto flex-column\">\r\n");
      out.write("  		<header>\r\n");
      out.write("    		<p align=\"left\"><a href=\"../mainView.jsp\"><img src=\"../img/title.png\" width=\"150\" height=\"55\"></img></a></p>\r\n");
      out.write("  		</header>\r\n");
      out.write("  		\r\n");
      out.write("		<main class=\"px-3\">\r\n");
      out.write("    		<p>\r\n");
      out.write("    			눈을 떴다. 이곳이 어디인지 기억나지 않는다. 신문지로 막힌 창문 사이에 세어나오는 빛으로 그나마 방의 형태를 인지할 수 있었다. <br>\r\n");
      out.write("    			작은 방이다. 책장과 연결된 큰 책상, 사무용 의자, 작은 침대 그리고 사람. <br><br>\r\n");
      out.write("    			\r\n");
      out.write("    			사람? 침대를 사이에 두고 누군가 있다. 인기척이 느껴지지 않는다. 깨질 듯 아픈 머리로 상황을 이해하기 위해 10분간 가만히 있었다. <br>\r\n");
      out.write("    			근데 저 사람은 전혀 움직이질 않는다. <br><br>\r\n");
      out.write("    			\r\n");
      out.write("    			몸을 간신히 일으켜 침대에 앉았다. 사람이 보였다, 아니 시체라고 하는게 더 가깝겠지. <br>\r\n");
      out.write("    			그 시체에서 뿜어져 나온 피는 이미 바닥에 말라 붙어있었다. 날카로운 것에 찔린 것 같아 보였다. <br>\r\n");
      out.write("    			마른 세수를 하는데, 비릿한 냄새가 코를 찌른다. 그제서야 내 손과 옷에 말라붙은 검붉은 피가 보였다. <br>\r\n");
      out.write("    			그리고 양 팔에 날카로운 고통이 느껴진다. 베인듯한 상처가 나있다. <br><br>\r\n");
      out.write("    			\r\n");
      out.write("    			내가 저 사람을 죽인건가? 아니면 저 사람이 날 죽이려고 했던 건가, 그래서 방어하기 위해 내가 이렇게 다친건가? <br>\r\n");
      out.write("    			아무 기억도 나지 않는다. 심지어 내가 누구인지 기억도 나지 않는다 <br><br>\r\n");
      out.write("    			\r\n");
      out.write("    			이상하게도 이 상황이 익숙하다. 당장이라도 도망치고 싶고, 빨리 이곳을 벗어나야 한다는 생각이 들지 않는다. <br>\r\n");
      out.write("    			천천히 몸을 일으켜 방 안을 살펴보기로 했다. <br><br>\r\n");
      out.write("    			\r\n");
      out.write("    			무엇을 먼저 봐야 할까? <br><br>\r\n");
      out.write("    			\r\n");
      out.write("    		");
 	
    			request.setCharacterEncoding("UTF-8");
				String p2Check = (String)session.getAttribute("p2Check");
				String p3Check = (String)session.getAttribute("p3Check");
				String p4Check = (String)session.getAttribute("p4Check");
				if(p2Check == null) {
			
      out.write("\r\n");
      out.write("    			<a href=\"./page2.jsp\"><img src=\"../img/game01_p1-body01.png\" width=\"150\" height=\"150\"></img></a>\r\n");
      out.write("    			<a style=\"padding:10px\"></a>\r\n");
      out.write("    		");

				} else {
			
      out.write("\r\n");
      out.write("				<a href=\"./page2.jsp\"><img src=\"../img/game01_p1-body02.png\" width=\"150\" height=\"150\"></img></a>\r\n");
      out.write("    			<a style=\"padding:10px\"></a>\r\n");
      out.write("    		");

				}
				if(p3Check == null) {
			
      out.write("\r\n");
      out.write("				<a href=\"./page3.jsp\"><img src=\"../img/game01_p1-door01.png\" width=\"150\" height=\"150\"></img></a>\r\n");
      out.write("    			<a style=\"padding:10px\"></a>\r\n");
      out.write("    		");

				} else {
			
      out.write("\r\n");
      out.write("				<a href=\"./page3.jsp\"><img src=\"../img/game01_p1-door02.png\" width=\"150\" height=\"150\"></img></a>\r\n");
      out.write("    			<a style=\"padding:10px\"></a>\r\n");
      out.write("    		");

				}
				if(p4Check == null) {
					response.sendRedirect("./game01/page5.jsp");
			
      out.write("\r\n");
      out.write("    			<a href=\"./page4.jsp\"><img src=\"../img/game01_p1-desk01.png\" width=\"150\" height=\"150\"></img></a>\r\n");
      out.write("    		");

				} else {
			
      out.write("\r\n");
      out.write("				<a href=\"./page4.jsp\"><img src=\"../img/game01_p1-desk02.png\" width=\"150\" height=\"150\"></img></a>\r\n");
      out.write("			");

				}
			
      out.write("\r\n");
      out.write("    		</p>\r\n");
      out.write("  		</main>\r\n");
      out.write("\r\n");
      out.write(" 		<div class=\"b-example-divider\"></div>\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("  			<footer class=\"d-flex flex-wrap justify-content-between align-items-center py-3 my-4 border-top\">\r\n");
      out.write("    			<div class=\"col-md-4 d-flex align-items-center\">\r\n");
      out.write("     				<a href=\"/\" class=\"mb-3 me-2 mb-md-0 text-muted text-decoration-none lh-1\"></a>\r\n");
      out.write("     				<span class=\"mb-3 mb-md-0 text-muted\">Copylight &copy; Holomaking &nbsp; All Rights Reserved.</span>\r\n");
      out.write("    			</div>\r\n");
      out.write("  			</footer>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
